% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/deckgl-layers.R, R/doc-deckgl-layers.R
\name{add_s2_layer}
\alias{add_s2_layer}
\alias{s2_layer}
\title{S2 Layer}
\usage{
add_s2_layer(
  rdeck,
  ...,
  id = NULL,
  name = "S2Layer",
  data = NULL,
  visible = TRUE,
  pickable = FALSE,
  opacity = 1,
  position_format = "XYZ",
  color_format = "RGBA",
  auto_highlight = FALSE,
  highlight_color = "#00008080",
  get_s2_token = token,
  stroked = TRUE,
  filled = TRUE,
  extruded = FALSE,
  elevation_scale = 1,
  wireframe = FALSE,
  line_width_units = "meters",
  line_width_scale = 1,
  line_width_min_pixels = 0,
  line_width_max_pixels = 9007199254740991,
  line_joint_rounded = FALSE,
  line_miter_limit = 4,
  get_fill_color = "#000000ff",
  get_line_color = "#000000ff",
  get_line_width = 1,
  get_elevation = 1000,
  material = TRUE,
  blending_mode = "normal",
  tooltip = FALSE
)
}
\arguments{
\item{rdeck}{<\code{\link{rdeck}} | \code{\link{rdeck_proxy}}> An rdeck map instance.}

\item{...}{Additional parameters that will be forwarded to deck.gl javascript without
validation nor processing. All dots must be named and will be \code{camelCased} when serialised.
Layers will raise a warning when dots are used, warning class \code{rdeck_dots_nonempty}.}

\item{id}{<\code{string}> The layer's identifier must be unique for among all layers of the same
type for a map. Defaults to \code{\link[uuid:UUIDgenerate]{uuid::UUIDgenerate()}}, but should be explicitly defined for
updatable layers in a shiny application.}

\item{name}{<\code{string}> Identifies the layer on tooltips and legends. It does
not need to be unique, but should be brief. Defaults to the deck.gl class name for the layer.}

\item{data}{<\code{data.frame} | \code{sf} | \code{string}> The layer's data. Data frames will contain all
columns that are referenced by the layer's accessors. Strings will be interpreted as a URL and
data will be retrieved dynamically in the browser.}

\item{visible}{<\code{logical}> Determines whether the layer is visible or not; also determines
whether any legend elements for the layer will be displayed.}

\item{pickable}{<\code{logical}> Determines if the layer responds to pointer / touch events.}

\item{opacity}{<\code{number}> Determines the layer's opacity.}

\item{position_format}{<\code{"XY"} | \code{"XYZ"}> Determines whether each coordinate has two (XY)
or three (XYZ) elements.}

\item{color_format}{<\code{"RGB"} | \code{"RGBA"}> Determines whether the alpha channel of the colours
will be ignored by accessors, making all colours opaque.}

\item{auto_highlight}{<\code{logical}> When \code{TRUE}, the current object \emph{hovered} by the cursor is
highlighted by \code{highlight_color}.}

\item{highlight_color}{<\code{\link{accessor}} | \code{\link{scale}} | \code{\link{color}}> When \code{auto_highlight} and
\code{pickable} are enabled, \code{highlight_color} determines the colour of the currently
highlighted object. If a single colour value is supplied, that colour will be used to
highlight all objects in the layer. Per-object highlighting is achieved with a colour scale,
or a \href{https://dplyr.tidyverse.org/articles/programming.html}{tidy-eval} column of colours.}

\item{get_s2_token}{<\code{\link{accessor}}> The S2 hex token for each S2 cell. Accepts a
\href{https://dplyr.tidyverse.org/articles/programming.html}{tidy-eval} character column.}

\item{stroked}{<\code{logical}> If \code{TRUE}, draw an outline around each object.}

\item{filled}{<\code{logical}> If \code{TRUE}, draw the filled area of each point.}

\item{extruded}{<\code{logical}> If \code{TRUE}, extrude objects along the z-axis; if \code{FALSE}, all
objects will be flat.}

\item{elevation_scale}{<\code{number}> The elevation multiplier.}

\item{wireframe}{<\code{logical}> If \code{TRUE} and \code{extruded == TRUE}, draw a line wireframe of the
object. The outline will have horizontal lines closing the top and bottom polygons and
vertical lines for each vertex of the polygon.}

\item{line_width_units}{<\code{"pixels"} | \code{"meters"}> The units of line width.}

\item{line_width_scale}{<\code{number}> The line width multiplier.}

\item{line_width_min_pixels}{<\code{number}> The minimum line width in pixels.}

\item{line_width_max_pixels}{<\code{number}> The maximum line width in pixels.}

\item{line_joint_rounded}{<\code{logical}>}

\item{line_miter_limit}{number}

\item{get_fill_color}{<\code{\link{accessor}} | \code{\link{scale}} | \code{\link{color}}> The fill colour of each object.
Accepts a single colour value, a colour scale, or a
\href{https://dplyr.tidyverse.org/articles/programming.html}{tidy-eval} column of colours.}

\item{get_line_color}{<\code{\link{accessor}} | \code{\link{scale}} | \code{\link{color}}> The line colour of each object.
Accepts a single colour value, a colour scale, or a
\href{https://dplyr.tidyverse.org/articles/programming.html}{tidy-eval} column of colours.}

\item{get_line_width}{<\code{\link{accessor}} | \code{\link{scale}} | \code{number}> The outline of the object
in units specified by \code{line_width_units}.
Accepts a single numeric value, a numeric scale, or a
\href{https://dplyr.tidyverse.org/articles/programming.html}{tidy-eval} column of numbers.}

\item{get_elevation}{<\code{\link{accessor}} | \code{\link{scale}} | \code{number}> The elevation to extrude each
object in the z-axis. Height units are in metres.
Accepts a single numeric value, a numeric scale, or a
\href{https://dplyr.tidyverse.org/articles/programming.html}{tidy-eval} column of numbers.}

\item{material}{<\code{logical}>}

\item{blending_mode}{<\code{"normal"} | \code{"additive"} | \code{"subtractive"}> Sets the blending mode.
Blending modes:
\itemize{
\item \code{normal}: Normal blending doesn't alter colours of overlapping objects.
\item \code{additive}: Additive blending adds colours of overlapping objects. Useful for highlighting
dot density on dark maps.
\item \code{subtractive}: Subtractive blending darkens overlapping objects. Useful for highlighting
dot density on light maps.
}}

\item{tooltip}{<\code{\link{tooltip}}> Defines the columns (and their order) that will be displayed in
the layer tooltip, if \code{pickable == TRUE}. Supports <\link[dplyr:dplyr_tidy_select]{tidy-select}>
if a \code{data} is a \code{data.frame}. \code{sfc} columns are always removed.}
}
\description{
S2 Layer
}
\seealso{
\url{https://github.com/visgl/deck.gl/blob/v8.3.11/docs/api-reference/geo-layers/s2-layer.md}

Other geo-layers: 
\code{\link{add_great_circle_layer}()},
\code{\link{add_h3_cluster_layer}()},
\code{\link{add_h3_hexagon_layer}()},
\code{\link{add_mvt_layer}()},
\code{\link{add_terrain_layer}()},
\code{\link{add_tile_3d_layer}()},
\code{\link{add_tile_layer}()},
\code{\link{add_trips_layer}()}

Other layers: 
\code{\link{add_arc_layer}()},
\code{\link{add_bitmap_layer}()},
\code{\link{add_column_layer}()},
\code{\link{add_contour_layer}()},
\code{\link{add_cpu_grid_layer}()},
\code{\link{add_geojson_layer}()},
\code{\link{add_gpu_grid_layer}()},
\code{\link{add_great_circle_layer}()},
\code{\link{add_grid_cell_layer}()},
\code{\link{add_grid_layer}()},
\code{\link{add_h3_cluster_layer}()},
\code{\link{add_h3_hexagon_layer}()},
\code{\link{add_heatmap_layer}()},
\code{\link{add_hexagon_layer}()},
\code{\link{add_icon_layer}()},
\code{\link{add_line_layer}()},
\code{\link{add_mvt_layer}()},
\code{\link{add_path_layer}()},
\code{\link{add_point_cloud_layer}()},
\code{\link{add_polygon_layer}()},
\code{\link{add_scatterplot_layer}()},
\code{\link{add_scenegraph_layer}()},
\code{\link{add_screen_grid_layer}()},
\code{\link{add_simple_mesh_layer}()},
\code{\link{add_solid_polygon_layer}()},
\code{\link{add_terrain_layer}()},
\code{\link{add_text_layer}()},
\code{\link{add_tile_3d_layer}()},
\code{\link{add_tile_layer}()},
\code{\link{add_trips_layer}()}
}
\concept{geo-layers}
\concept{layers}
