% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/shiny.R
\name{rdeck_proxy}
\alias{rdeck_proxy}
\title{RDeck proxy}
\usage{
rdeck_proxy(
  id,
  session = shiny::getDefaultReactiveDomain(),
  mapbox_api_access_token = NULL,
  map_style = "mapbox://styles/mapbox/dark-v10",
  theme = "kepler",
  initial_bounds = NULL,
  initial_view_state = view_state(center = c(0, 0), zoom = 1),
  controller = TRUE,
  picking_radius = 0,
  use_device_pixels = TRUE,
  ...
)
}
\arguments{
\item{id}{the map id}

\item{session}{the shiny session}
}
\description{
Creates an \code{\link[=rdeck]{rdeck()}} interface for asynchronous updates of a pre-rendered rdeck map
in Shiny apps.
}
\details{
All rdeck props can be updated through the proxy, layers that are added
to the proxy (e.g. \code{rdeck_proxy \%>\% add_h3_hexagon_layer()}) will be merged with
pre-rendered rdeck layers.

Layers are merged by their \code{id}. Matched layers will be updated in place, new layers
will be appended and hence drawn \emph{on top} of all existing layers. For layer updates, you
may omit the \code{data} prop to avoid re-serialising unchanged data. All other props will
assume their defaults if omitted.
}
\examples{
library(shiny)
library(dplyr)
library(h3jsr)
library(viridis)

ui <- fillPage(
  rdeckOutput("map", height = "100\%"),
  absolutePanel(
    top = 10, left = 10,
    sliderInput("range", "value", 0, 1, c(0, 1), step = 0.1)
  )
)

h3_data <- tibble(
  hexagon = get_res0() \%>\%
    get_children(res = 3) \%>\%
    unlist() \%>\%
    unique(),
  value = runif(length(hexagon))
)

map <- rdeck() \%>\%
  add_h3_hexagon_layer(
    id = "h3_hexagon",
    name = "hexagons",
    data = h3_data,
    get_fill_color = scale_color_quantize(
      col = value,
      palette = viridis(6, 0.3)
    ),
    pickable = TRUE,
    auto_highlight = TRUE,
    tooltip = c(hexagon, value)
  )

server <- function(input, output, session) {
  output$map <- renderRdeck(map)

  filtered_data <- reactive({
    h3_data \%>\%
      filter(value >= input$range[1] & value <= input$range[2])
  })

  observe({
    rdeck_proxy("map") \%>\%
      add_h3_hexagon_layer(
        id = "h3_hexagon",
        name = "hexagons",
        data = filtered_data(),
        get_fill_color = scale_color_quantize(
          col = value,
          palette = cividis(6, 0.3)
        ),
        pickable = TRUE,
        auto_highlight = TRUE,
        tooltip = c(hexagon, value)
      )
  })
}

app <- shinyApp(ui, server)
}
