<%#
  template for generating an accessor validator
  data is expected with the following form:
  data = {
    name: "foo",
    type: "number",
    min: 0,
    max: 100
  }
%>
<%# validate constant -%>
<% if (type !== "function" && type) { -%>
  if(!inherits(<%- name -%>, "accessor")) {
    <%- include("./validate-type", {name, type, min, max}) -%>
    <%# validate scalar for non-array / objects -%>
    <% if (["number", "string", "boolean"].includes(type)) { -%>
      assert_scalar(<%- name -%>)
    <% } -%>
    return()
  }
<% } -%>
<%# validate accessor -%>
<% const col = `data[[${name}$col]]`; -%>
data <- layer$data
if (inherits(data, "data.frame")) {
  assert_col_exists(<%- name -%>$col, data)
  <% if (scalable) { -%>
    if (!inherits(<%- name -%>, "accessor_scale")) {
      <%- include("./validate-type", {name: col, type, min, max}); -%>
    }
  <% } else { -%>
    <%- include("./validate-type", {name: col, type, min, max}); -%>
  <% } -%>
}
<% if (scalable) { -%>
  if (inherits(<%- name -%>, "accessor_scale")) {
    <%# colors must be rgba, others numeric -%>
    <%-
      type === "color" || /color$/.test(name)
        ? `assert_scalable_is_color(${name})`
        : `assert_scalable_is_numeric(${name})`;
    %>
    <%# check data type compatible with scale type -%>
    validate_col(<%- name -%>, data)
  }
<% } -%>
